{"ast":null,"code":"import { tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    http;\n    apiUrl = `${environment.apiUrl}/Auth`;\n    authTokenKey = 'authToken';\n    constructor(http) {\n      this.http = http;\n    }\n    login(user) {\n      return this.http.post(`${this.apiUrl}/login`, user).pipe(tap(response => {\n        debugger;\n        if (response && response.token) {\n          debugger;\n          localStorage.setItem(this.authTokenKey, response.token);\n        }\n      }));\n    }\n    register(user) {\n      return this.http.post(`${this.apiUrl}/register`, user);\n    }\n    isAuthenticated() {\n      let x = !!localStorage.getItem('authToken');\n      return !!localStorage.getItem('authToken');\n    }\n    static ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":{"version":3,"names":["tap","environment","AuthService","http","apiUrl","authTokenKey","constructor","login","user","post","pipe","response","token","localStorage","setItem","register","isAuthenticated","x","getItem","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Projects\\Note Management\\notes-management-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { User } from '../models/user.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private apiUrl = `${environment.apiUrl}/Auth`;\r\n  private authTokenKey = 'authToken';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(user: User): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/login`, user)\r\n      .pipe(\r\n        tap(response => {\r\n          debugger\r\n          if (response && response.token) {\r\n            debugger\r\n            localStorage.setItem(this.authTokenKey, response.token);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  register(user: User): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/register`, user);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    let x = !!localStorage.getItem('authToken');\r\n    return !!localStorage.getItem('authToken');\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;AAEtC,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,WAAaC,WAAW;EAAlB,MAAOA,WAAW;IAIFC,IAAA;IAHZC,MAAM,GAAG,GAAGH,WAAW,CAACG,MAAM,OAAO;IACrCC,YAAY,GAAG,WAAW;IAElCC,YAAoBH,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAEvCI,KAAKA,CAACC,IAAU;MACd,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,GAAG,IAAI,CAACL,MAAM,QAAQ,EAAEI,IAAI,CAAC,CACrDE,IAAI,CACHV,GAAG,CAACW,QAAQ,IAAG;QACb;QACA,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,KAAK,EAAE;UAC9B;UACAC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACT,YAAY,EAAEM,QAAQ,CAACC,KAAK,CAAC;QACzD;MACF,CAAC,CAAC,CACH;IACL;IAEAG,QAAQA,CAACP,IAAU;MACjB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,GAAG,IAAI,CAACL,MAAM,WAAW,EAAEI,IAAI,CAAC;IAC7D;IAEAQ,eAAeA,CAAA;MACb,IAAIC,CAAC,GAAG,CAAC,CAACJ,YAAY,CAACK,OAAO,CAAC,WAAW,CAAC;MAC3C,OAAO,CAAC,CAACL,YAAY,CAACK,OAAO,CAAC,WAAW,CAAC;IAC5C;;uCA1BWhB,WAAW,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAXpB,WAAW;MAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;MAAAC,UAAA,EAFV;IAAM;;SAEPvB,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}